{"meta":{"title":"Hi, Leo","subtitle":"My life is brilliant.","description":null,"author":"Leo Wang","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2016-03-03T04:59:08.000Z","updated":"2016-03-03T04:59:08.749Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JAVA常用API总结","slug":"Java常用API总结","date":"2017-06-29T08:41:00.000Z","updated":"2017-06-29T08:42:55.584Z","comments":true,"path":"2017/06/29/Java常用API总结/","link":"","permalink":"http://yoursite.com/2017/06/29/Java常用API总结/","excerpt":"","text":"本文总结了java语言中关于String, Array, Collection以及IO的一些常用API和它们的例子. StringString是java常用的对象, 它的常用API如下&gt; char charAt(int index) 获取指定index处的一个字符. int codePointAt(int index) 获取指定index处的一个字符的Unicode值. int codePointBefore(int index) 获取指定index前一个字符的Unicode值. int compareTo(String anotherString) 和另外一个String对象进行比较,比较每个字符的unicode值大小.如果当前的String大,返回正数;如果当前的小,则返回负数;两者相同则返回0. int compareToIgnoreCase(String str) 同上,只是忽略大小写. String concat(String str) 将指定String对象拼接到当前String的结尾. boolean contains(CharSequence s) 判断当前String是否包含指定的字符串. boolean contentEquals(CharSequence s)boolean contentEquals(StringBuffer sb) 判断当前String是否和指定的字符串内容相同. boolean endsWith(String suffix) 判断当前String是否以给定的后缀结尾. boolean equals(Object anObject) 判断当前String是否和给定的对象相等. 如果给定的对象是String, 则判断它们的内容是否相同. boolean equalsIgnoreCase(String s) 同上, 只是忽略大小写. static String format(Locale l, String format, Object... args) 以指定的区域, 格式化的String和其参数构成一个String并返回. static String format(String format, Object... args) 同上. byte[] getBytes()byte[] getBytes(String charsetName) 把当前String对象编码成byte数组形式. int indexOf(int ch)int indexOf(int ch, int fromIndexint indexOf(String str)int indexOf(String str, int fromIndex 返回指定字符或者字符串第一次出现的位置. boolean isEmpty() 判断当前String对象的长度是否为0. static String join(CharSequence delimiter, CharSequence... elements) 将给定的几个字符串按指定的分隔符拼接成一个字符串. int lastIndexOf(int ch)int lastIndexOf(int ch, int fromIndex)int lastIndexOf(String str)int lastIndexOf(String str, int fromIndex) 返回指定字符或者字符串最后一次出现的位置. int length() 返回当前String的长度. boolean matches(String regex) 判断当前String是否符合给定的正则表达式. String replace(char oldChar, char newChar) 将当前String内的所有oldChar替换成newChar. String replace(CharSequence target, CharSequence replacement) 将当前String内所有target替换成replacement. String replaceAll(String regex, String replacement) 将当前String内符合给定正则表达式的部分替换成replacement. String replaceFirst(String regex, String replacement) 将当前String内符个给定正则表达式的第一个部分替换成replacement. String[] split(String regex) 将当前String按照给定的正则表达式分隔符拆分成一个String数组. String[] split(String regex, int limit) 同上, limit限定了拆分的元素个数. boolean startsWith(String prefix) 判断当前String是否包含指定的前缀. boolean startWith(String prefix, int toffset) 判断以指定偏移起始的子字符串是否包含指定的前缀. CharSequence subSequence(int beginIndex, int endIndex) 获取子字符串序列. String subString(int beginIndex)String subString(int beginIndex, int endIndex) 获取子字符串. char[] toCharArray() 将当前String转换成字符数组, Sting toLowerCase()String toLowerCase(Locale locale) 将当前String中每个字符转换成小写 String toUpperCase()String toUpperCase(Locale locale) 将当前String中的每个字符转换成大写. String trim() 去除当前String两端的空格. static String valueOf(boolean b)static String valueOf(char c)static String valueOf(char[] data)static String valueOf(char[] data, int offset, int count)static String valueOf(double d)static String valueOf(float f)static String valueOf(int i)static String valueOf(long l)static String valueOf(Object obj) 返回给定参数的String形式. Pattern 和 Matcher1234567String strToMatch = &quot;aabbccaaaddd&quot;;String regex = &quot;aaa&quot;;Pattern p = Pattern.compile(regex);Matcher m = p.matcher(strToMatch);if (m.matches()) &#123; String result = m.group(0);&#125; Pattern 常用APIstatic Pattern compile(String regex)static Pattern compile(String regex, int flags) 获得由指定正则表达式生成的pattern对象. Matcher matcher(CharSequence input) 获得一个包含input的Matcher对象. static matches(String regex, CharSequence input) 判断input是否包含匹配给定正则表达式的内容. Matcher 常用APIint end() 获得最后一次匹配的位置 boolean find()boolean find(int start) 进行下一次匹配并判断是否存在. String group() 获得前一次匹配到的内容. String group(int group) 获取前一次匹配时得到的指定group的内容. int groupCount() 获得匹配到的组数. boolean hitEnd() 判断最后一次匹配是否到达字符串结尾. boolean matches() 进行匹配并判断是否成功. int start() 获得前一次匹配的起始偏移量. Arraystatic &lt;T&gt; List&lt;T&gt; asList(T... a) 将一个数组转换成对应类型的List对象 static int binarySearch(T[] a, T key) 使用二分法查找算法查找数组内的某个元素，返回其对应的index；如果没有找到，则返回-1。使用二分法查找之前需要保证数组已经升序排列。其中T类型包括byte、char、double、float、int、long、Object、short。 static int binarySearch(T[] a, int fromIndex, int toIndex, T key) 同上。只是规定了查找范围在fromIndex到toIndex之间。 static &lt;T&gt; int binarySearch(T[] a, int fromIndex, int toIndex, T key, Comparator&lt;? super T&gt; c) 同上。只是要提供一个T类型的Comparator 对象。T为泛型参数。规定了查找范围在fromIndex到toIndex之间。 static binarySearch(T[] a, T key, Comparator&lt;? super T&gt; c) 同上。没有规定查找范围。 static T[] copyOf(T[] original, int newLength) 对原始数组进行复制，不够长度的部分补充T 类型的初始值。T 类型包括基本类型和泛型。 static T[] copyOfRange(T[] original, int from, int to) 对原始数组进行复制，复制的范围是from 到 to。T 类型包括基本类型和泛型。 static boolean equals(T[] a, T[] b) 判断两个数组是否相等，同时比较长度和内容。 static void fill(T[] a, T val) 将val 填充到数组的每一个位置。 static void fill(T[] a, int fromIndex, int toIndex, T val) 将val 填充到数组从fromIndex 到toIndex的每一个位置。 static void parallelSort(T[] a) 对数组进行归并排序或者Tim排序，排序后为升序。jdk 1.8 static void parallelSort(T[] a, int fromIndex, int toIndex) 对数组范围在fromIndex到toIndex之间的元素进行归并排序或者Tim排序。jdk 1.8 static void parallelSort(T[] a, Comparator&lt;? super T&gt; cmp) 对数组进行归并排序或者Tim排序。数组排序的顺序由Comparator 对象规定。jdk 1.8 static void parallelSort(T[] a, int fromIndex, int toIndex, Comparator&lt;? super T&gt; cmp) 对数组范围在fromIndex到toIndex之间的元素进行归并排序或者Tim排序。数组排序的顺序由Comparator 对象规定。jdk 1.8 static void sort(T[] a) 对数组进行升序排序，排序算法为快速排序。如果T 为Object 类型时，需要其实现Comparable 接口。 static void sort(T[] a, int fromIndex, int toIndex) 同上，指定范围从fromIndex 到toIndex 之间。 static void sort(T[] a, Comparator&lt;? super T&gt; c) 同上，排序的顺序由Comparator 规定。 static void sort(T[] a, int fromIndex, int toIndex, Comparator&lt;? super T&gt; c) 同上，指定范围从fromIndex 到toIndex 之间。 static String toString(T[] a) 将数组转换为字符串对象，转换之后形如[x,y,z] CollectionList常用的List包括ArrayList 、LinkedList 和Stack。 ArrayLIst 常用APIboolean add(E e) 向ArrayList尾部添加一个元素。 void add(int index, E e) 向ArrayList的指定index处添加一个元素。 boolean addAll(Collection&lt;? extends E&gt; c) 向ArrayList尾部添加所有c 中的元素。 boolean addAll(int index, Collection&lt;? extends E&gt; c) 向ArrayList的指定index处添加所有c 中的元素。 void clear() 清空ArrayList。 boolean contains(Object o) 判断ArrayList中是否包含指定对象。 E get(int index) 从ArrayList中获取指定index处的元素。 int indexOf(Object o) 获得指定对象在ArrayList中的位置，如果不存在则返回-1。 boolean isEmpty() 判断ArrayList的长度是否为0。 Iterator&lt;E&gt; iterator() 获得一个迭代器。 int lastIndexOf(Object o) 获得指定对象在ArrayList中的最后一次出现的位置，如果不存在则返回-1。 E remove(int index) 将指定index处的元素从ArrayList中移除。 E remove(Object o) 将指定对象从ArrayList中移除。 boolean removeAll(Collection&lt;?&gt; c) 将指定c 中所有元素从ArrayList中删除。 void replaceAll(Collection&lt;?&gt; c) 用指定c 中所有元素替换ArrayList。不存在c 中的则删除。 E set(int index, E element) 更新指定位置处的元素。 int size() 获得ArrayList的元素个数。 void sort(Comparator&lt;? super E&gt; c) 按照指定的Comparator 对ArrayList进行排序。 List&lt;E&gt; subList(int fromIndex, int toIndex) 获得一个从fromIndex 到toIndex 的子List，左闭右开。 Object[] toArray() 将ArrayList转换成数组。 &lt;T&gt; T[] toArray(T[] a) 将ArrayList转换成数组。a 不需要指定大小。 void trimToSize() 将ArrayList的容量缩减至适应当前元素个数。 LinkedList 常用APILinkedList是List的一种双链表实现。同时它也是Deque的一种实现。这里仅列出与ArrayList和 Deque不同的API。 set(int index, E element) 将元素添加到List的指定位置处。 Stack 常用APIboolean empty() 判断堆栈是否为空 E peek() 从栈顶取一个元素，但是不删除它。 E pop() 从栈顶取出一个元素，并删除它。 E push(E item) 将一个元素压入栈顶。 int search(Object o) 查找一个元素，返回它与栈顶的距离，栈顶元素为1。 如果没有找到，则返回-1。 Set常用的Set有两种，分别为HashSet和TreeSet。 HashSet 常用APIboolean add(E e) 如果指定元素不存在，便将其添加到set中。 void clear() 清空set中所有元素。 Object clone() 对set进行浅克隆。只克隆set对象，不克隆其中的元素。 boolean contains(Object o) 判断set中是否包含指定对象。 boolean isEmpty() 判断set是否为空。 Iterator&lt;E&gt; iterator() 获得一个迭代器。 boolean remove(Object o) 从set中删除指定元素。 int size() 获得set的元素个数。 TreeSet 常用APITreeSet是排序了的set。可以在其构造器中制定一个Comparator对象，用来排序。此处仅列出与HashSet不同的API。 E ceiling(E e) 获得大于等于指定元素的最小一个元素，无则返回null。 Iterator&lt;E&gt; descendingIterator() 获得一个逆序的迭代器。 NavigableSet&lt;E&gt; descendingSet() 获得获得一个逆序的set。 E first() 获得最小的元素。 E floor(E e) 获得小于等于指定元素的最大一个元素。如果没有则返回null。 SortedSet&lt;E&gt; headSet(E toElement) 获得小于指定元素的一个子set。 NavigableSet&lt;E&gt; headSet(E toElement, boolean inclusive) inclusive为true 时，获得一个小于等于指定元素的子set，否则同上。 E higher(E e) 获得大于指定元素的最小一个元素。如果没有则返回null。 E last() 获得最大的元素。 E lower(E e) 获得小于指定元素的最大一个元素。如果没有则返回null。 E pollFirst() 获取最小元素，并从set中删除它。set为空时返回null。 E pollLast() 获取最大元素，并从set中删除它。set为空时返回null。 NavigableSet&lt;E&gt; subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive) 获得从fromElement 到toElement 区间的一个子set。fromInclusive 和toInclusive 控制区间开闭。 SortedSet&lt;E&gt; subSet(E fromElement, E toElement) 获得从fromElement 到toElement 区间的一个子set。左闭右开。 SortedSet&lt;E&gt; tailSet(E fromElement) 获得大于指定元素的一个子set。 NavigableSet&lt;E&gt; tailSet(E fromElement, boolean inclusive) inclusive为true 时，获得大于等于指定元素的一个子set，否则同上。 Queue| | 抛出异常 | 返回值 | ———–&gt;|&gt;————&gt;|&gt;———-&gt;| 插入 | add(e) | offer(e)|| 删除 | remove() | poll() || 测试 | element() | peek() | boolean add(E e) 向队列尾部添加一个元素，成功则返回true。如果队列已满，则抛出IllegalStateException。 E element() 从队列头取一个元素，但是不删除它。队列已为空时，抛出NoSuchElementException。 boolean offer(E e) 向队列尾部添加一个元素，成功则返回true，否则返回false。 E peek() 从队列头取一个元素，但是不删除它。队列已为空时，返回null。 E poll() 从队列头取一个元素，并在队列中删除它。队列已为空时，返回null。 E remove() 从队列头取一个元素，并在队列中删除它。队列已为空时，抛出NoSuchElementException。 DequeDeque 是双向队列，缩写自Double Ended Queue。它的常见实现包括ArrayDeque 和 LinkedList。 | — | 抛出异常 | 返回值 | 抛出异常 | 返回值 ||&gt;———-|&gt;——————|&gt;————–|&gt;————–|&gt;————–|| 插入 | addFirst(e) |offerFirst(e) |addLast(e) |offerLast(e) || 删除 | removeFirst() |pollFirst() |removeLast() |pollLast() || 测试 | getFirst() |peekFirst() |getLast() |peekLast() | boolean add(E e) 向队列尾添加一个元素，成功则返回true。如果队列已满，则抛出IllegalStateException。 void addFirst(E e) 向队列头添加一个元素。如果队列已满，则抛出IllegalStateException。 void addLast(E e) 向队列尾添加一个元素。如果队列已满，则抛出IllegalStateException。 boolean contains(Object o) 判断队列中是否包含指定的对象。 Iterator&lt;E&gt; descendingIterator() 返回一个逆序的迭代器。 E element() 从队列头取一个元素，但是不删除它。队列已为空时，抛出NoSuchElementException。 E getFirst() 从队列头取一个元素，但是不删除它。队列已为空时，抛出NoSuchElementException。 E getLast() 从队列尾取一个元素，但是不删除它。队列已为空时，抛出NoSuchElementException。 Iterator&lt;E&gt; iterator() 按队列的顺序返回一个的迭代器。 boolean offer(E e) 向队列尾添加一个元素，成功则返回true，否则返回false。 boolean offerFirst(E e) 向队列头添加一个元素，成功则返回true，否则返回false。 boolean offerLast(E e) 向队列尾添加一个元素，成功则返回true，否则返回false。 E peek() 从队列头取一个元素，但是不删除它。队列已为空时，返回null。 E peekFirst() 从队列头取一个元素，但是不删除它。队列已为空时，返回null。 E peekLast() 从队列尾取一个元素，但是不删除它。队列已为空时，返回null。 E poll() 从队列头取一个元素，并在队列中删除它。队列已为空时，返回null。 E pollFirst() 从队列头取一个元素，并在队列中删除它。队列已为空时，返回null。 E pollLast() 从队列尾取一个元素，并在队列中删除它。队列已为空时，返回null。 E pop() 从队列头取一个元素，并在队列中删除它。队列已为空时，抛出NoSuchElementException。 void push(E e) 将一个元素压入队列头部。如果队列已满，则抛出IllegalStateException。 E remove() 从队列头取一个元素，并在队列中删除它。队列已为空时，抛出NoSuchElementException。 boolean remove(Object o) 从队列中查找指定的对象，并在第一次出现的地方删除它。成功时，返回true。 E removeFirst() 从队列头取一个元素，并在队列中删除它。队列已为空时，抛出NoSuchElementException。 boolean removeFirstOccurrence(Object o) 从队列中查找指定的对象，并在第一次出现的地方删除它。成功时，返回true。 E removeLast() 从队列尾取一个元素，并在队列中删除它。队列已为空时，抛出NoSuchElementException。 boolean removeLastOccurrence(Object o) 从队列中查找指定的对象，并在最后一次出现的地方删除它。成功时，返回true。 int size() 获得队列中元素的个数。 Map常用的两中Map的实现类分别是HashMap和TreeMap。 HashMap 常用APIvoid clear() 清空所有内容。 Object clone() 对map进行浅复制。 boolean contains(Object key) 判断该map是否包含指定的key。 boolean containsValue(Object value) 判断该map是否包含指定的value。 Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() 获得一个关于所有在此map中的内容的一个set。 V get(Object key) 获取指定key所关联的value对象。 V getOrDefault(Object key, V defaultValue) 同上，如果不存在，则返回默认值。 isEmpty() 判断当前map是否为空。 Set&lt;K&gt; keySet() 获得包含此map中所有key的一个set。 V put(K key, V value) 将一个value对象与key关联并存入此map。 void putAll(Map&lt;? extends K, ? extends V&gt; m) 将指定map复制到此map中。 V putIfAbsent(K key, V value) 如果指定的key没有关联任何对象，或者关联到null，则将一个value对象与此key关联并存入此map。 V remove(Object key) 从该map中移除一个与指定key关联的对象。 boolean remove(Object key, Object value) 如果指定的key与value是关联的，便从该map中移除。 V replace(K key, V value) 如果指定的key关联了某个对象或者null，则用value替换之。 boolean replace(K key, V oldValue, V newValue) 如果指定的key与value是关联的，则用newValue替换oldValue。 int size() 获得该map已关联的key-value个数。 Collection&lt;V&gt; values() 获得该map中所有的value对象。 TreeMap 常用APITreeMap是基于红黑树实现的。所有元素默认按照升序排列，或者通过在构造器中指定一个Comparator来排序。此处仅列出与HashMap不同的API。 Map.Entry&lt;K,V&gt; ceilingEntry(K key) 获得所有key大于等于指定的key的key-value。 K ceilingKey(K key) 获得大于等于指定key的最小一个。 NavigableSet&lt;K&gt; descendingKeySet() 获得一个逆序的key的set。 NavigableMap&lt;K,V&gt; descendingMap() 获得一个逆序的map。 Map.Entry&lt;K,V&gt; firstEntry() 获得该map的最小key的key-value。 K firstKey() 获得该map的最小的key。 Map.Entry&lt;K,V&gt; floorEntry(K key) 获得所有key小于等于指定的key的key-value。 K floorKey(K key) 获得小于等于该key的最大一个。 SortedMap&lt;K,V&gt; headMap(K toKey) 获得所有key小于指定tokey的key-value。 NavigableMap&lt;K,V&gt; headMap(K toKey, boolean inclusive) 同上，如果inclusive为true，则包括等于toKey的key-value。 Map.Entry&lt;K,V&gt; higherEntry(K key) 获得所有大于指定key的key-value。 K higherKey(K key) 获得大于指定key的最小一个。 Map.Entry&lt;K,V&gt; lastEntry() 获得该map的最大key的key-value。 K lastKey() 获得该map的最大的key。 Map.Entry&lt;K,V&gt; lowerEntry(K key) 获得所有小于指定key的key-value。 K lowerKey(K key) 获得小于指定key的最大一个。 NavigableMap&lt;K,V&gt; subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) 获得从fromKey到toKey的所有key-value。fromInclusive和toInclusive控制区间开闭。 SortedMap&lt;K,V&gt; subMap(K fromKey, K toKey) 获得从fromKey到toKey的所有key-value，左闭右开。 SortedMap&lt;K,V&gt; tailMap(K fromKey) 获得所有key小于指定tokey的key-value。 SortedMap&lt;K,V&gt; tailMap(K fromKey, boolean inclusive) 同上，如果inclusive为true，则包括等于fromKey的key-value。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-07-26T08:54:39.589Z","updated":"2016-03-03T04:28:00.602Z","comments":true,"path":"2016/07/26/hello-world/","link":"","permalink":"http://yoursite.com/2016/07/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}